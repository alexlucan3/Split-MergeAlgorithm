# -*- coding: utf-8 -*-
"""Split&MergeProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aEjrHpPS1_w0YwK0FD96ZP8BPmESUAkj

# Project Description
"""

StudentName = "Farcas Rares & Lucan Alexandru"
StudentSpecialization = "TST RO"
ProjectName = "Split & Merge Image Segmentation"
print("Project name: ")
print(ProjectName)
print("This work is realised by:")
print(StudentName, " - " , StudentSpecialization)

"""# Import the image from the account's google drive

Import the Google Drive to the project.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Import libraries"""

import cv2
import matplotlib.pyplot as plt
import numpy as np

"""Read the image from the drive."""

InputIm_FileName="/content/drive/MyDrive/5.2.09.jpg"
InOriginalImg=cv2.imread(InputIm_FileName,0)

"""# Display the original image"""

plt.figure()
plt.imshow(InOriginalImg, cmap = 'gray')
plt.suptitle('The input image')
plt.show()

"""Display the histogram for the original image"""

plt.hist(InOriginalImg.ravel(),256,[0,255])
plt.suptitle('The brightness histogram')
plt.show()

print(InOriginalImg.shape)

"""Implementare algoritm"""

imageHeight = InOriginalImg.shape[0];
imageWidth  = InOriginalImg.shape[1];

#creare imagine de output
emptyimg = np.zeros([imageHeight,imageWidth,3],dtype=np.uint8)
emptyimg.fill(255) # or img[:] = 255

N=0;


def divideReg(a, b, N1, M1, N2, M2, T, N):

# a = input img
# b = output img
# N1,M1 = coordonate colt stanga sus 
# N2,M2 = coordonate colt dreapta jos
# T =  pragul folosit in criteriul de omogenitate 
# N =   memoreaza numarul de regiuni rezultate din divizarea recursiva 
    
    if omogen(a, N1, M1, N2, M2, T) == 0  :
        # regiunea nu este omogena
        # divizam regiunea in 4 zone egale si apelam functia recursiv pentru cele 4 zone
        divideReg(a, b, N1, M1, (N1+N2)/2 , (M1+M2)/2 , T, N)       
        divideReg(a, b,  (N1+N2)/2 , M1, N2, (M1+M2)/2 , T, N)
        divideReg(a, b, N1, (M1+M2)/2, (N1+N2)/2, M2 , T, N)
        divideReg(a, b, (N1+N2)/2, (M1+M2)/2, N2, M2, T, N)

    else:
      # regiunea este omogena 
        N += 1
        s = 0
       
      #calcularea valorii medii pentru regiunea omogena
        for i in range(int(M1), int(M2)):
            for j in range(int(N1), int(N2)):             
                s+= a[i][j]
        s = s / ((N2-N1)*(M2-M1))    
      #asignarea valorii medii pentru regiunea curenta
        for i in range(int(M1), int(M2)):
            for j in range(int(N1), int(N2)):
                b[i][j] = s  
              

#var1      
def omogen(a, N1, M1, N2, M2, T):
    Lmax=255
    max = 0
    min = Lmax

    for i in range(int(M1), int(M2)):
        for j in range(int(N1), int(N2)):
            if (a[i][j]< min).any():
                min = a[i][j]
            if (a[i][j]> max).any():
                max = a[i][j]
               
    if (np.array(max-min) < np.array(T)).any()  :
        return 1
    else:
        return 0

outputimg = emptyimg

divideReg(InOriginalImg,outputimg,0,0,imageWidth,imageHeight,100,N)

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
plt.imshow(InOriginalImg,cmap='gray')
plt.title('Original Image')

plt.subplot(1,2,2)
plt.hist(InOriginalImg.ravel(),256,[0,255])
plt.title('The brightness histogram')
plt.show()

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
plt.imshow(outputimg,cmap='gray')
plt.title('Splited & merged image')


plt.subplot(1,2,2)
plt.hist(outputimg.ravel(),256,[0,255])
plt.title('The brightness histogram')
plt.show()